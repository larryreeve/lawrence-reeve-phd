package client;

import java.util.List;

import client.service.ISummarizerService;
import client.service.ISummarizerServiceAsync;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.DeferredCommand;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.WindowResizeListener;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.rpc.ServiceDefTarget;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ChangeListener;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.HorizontalSplitPanel;
import com.google.gwt.user.client.ui.KeyboardListenerAdapter;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class TFDSSummarizer implements EntryPoint, WindowResizeListener
{
    private ISummarizerServiceAsync summarizerService;
    private AsyncCallback           serviceCallback; 
    
	public void onModuleLoad() 
	{
	    // Input Panel
	    final Label inputCaption = new Label("Input text to be summarized:");
	    final TextArea inputText = new TextArea();
	    inputText.setCharacterWidth(80);
	    inputText.setVisibleLines(25);
      
	    final Button buttonSummarize = new Button("Summarize");
      
	    final Label summarySizeCaption = new Label("Summary Size (% of original):");
	    final ListBox summarySizeListBox = new ListBox();
	    for (int idx=1; idx <= 100; idx++)
	        summarySizeListBox.addItem(Integer.toString(idx));
	    summarySizeListBox.setMultipleSelect(false);
	    summarySizeListBox.setVisibleItemCount(1);
	    summarySizeListBox.setItemSelected(9, true);
      
	    HorizontalPanel inputOptionsPanel  = new HorizontalPanel();
	    inputOptionsPanel.add(buttonSummarize);
	    inputOptionsPanel.add(summarySizeCaption);
	    inputOptionsPanel.add(summarySizeListBox);
	    inputOptionsPanel.setCellHorizontalAlignment(summarySizeCaption, HasHorizontalAlignment.ALIGN_RIGHT);
	    inputOptionsPanel.setCellHorizontalAlignment(summarySizeListBox, HasHorizontalAlignment.ALIGN_RIGHT);
	    inputOptionsPanel.setWidth("95%");
	    
	    VerticalPanel inputPanel = new VerticalPanel();
	    inputPanel.add(inputCaption);
	    inputPanel.add(inputText);
	    inputPanel.add(inputOptionsPanel);
	    //inputPanel.setWidth("100%");
		  

	    // Output Panel
        final Label outputCaption = new Label("System-generated Summary:");
          
        final TextArea outputText = new TextArea();
        outputText.setCharacterWidth(80);
        outputText.setVisibleLines(25);
        outputText.setReadOnly(true);
        
        final HTML statusMessage = new HTML();
          
        VerticalPanel outputPanel = new VerticalPanel();
        outputPanel.add(outputCaption);
        outputPanel.add(outputText);
        outputPanel.add(statusMessage);
        //outputPanel.setWidth("100%");
        
        
        // Reference Panel
        HTML inputPaperReferences = new HTML("<br>" + 
                "<br>" + 
                "<br>" +
                "This summarizer implements the frequency distribution summarization algorithm (using terms rather than concepts) described in these papers:" +
                "<br>" +
                "<br>" +
                "Lawrence H. Reeve, Hyoil Han, Saya V. Nagori, Jonathan C. Yang, Tamara A. Schwimmer, and Ari D. Brooks (2006)." + 
                "<br>" + 
                "<EM><A href=\"http://cluster.cis.drexel.edu:8080/biotus/pubs/2006CIKM.pdf\">Concept Frequency Distribution in Biomedical Text Summarization</A>.</EM>" +
                "<br>" +
                "<A href=\"http://sa1.sice.umkc.edu/cikm2006/\"> <FONT face=\"Times New Roman\">Proceedings of the 15th Conference on Information and Knowledge Management</FONT></A>" +
                "<FONT face=\"Times New Roman\"></FONT><A href=\"http://www.cs.iupui.edu/%7Ebioin/\"></A>." +
                "<br>" +
                "<br>" +
                "Lawrence H. Reeve and Hyoil Han (2007)."  +
                "<br>" +
                "<EM><a href=\"http://duc.nist.gov/pubs/2007papers/drexelu.final.pdf\">A Term Frequency Distribution Approach for the DUC-2007 Update Task.</a></EM>" +
                "<br>" +
                "Proceedings of the 2007 Document Understanding Conference Workshop (DUC 2007)" +
                "<br>" + 
                "<br>");

        HorizontalPanel referencePanel = new HorizontalPanel();
        referencePanel.add(inputPaperReferences);
        
        

		// Main Panel
        //HorizontalSplitPanel panelMain = new HorizontalSplitPanel();      
        HorizontalPanel mainPanel = new HorizontalPanel();
		//panelMain.setLeftWidget(inputPanel);
		//panelMain.setRightWidget(outputPanel);
		//panelMain.setWidth("100%");
		//panelMain.setHeight("100%");
        mainPanel.add(inputPanel);
        mainPanel.add(outputPanel);
        //panelMain.add(referencePanel);

		Window.addWindowResizeListener(this);
		RootPanel.get().add(mainPanel);
		RootPanel.get().add(referencePanel);
		
	    // Initialize the service.
	    //
	    this.summarizerService = (ISummarizerServiceAsync) GWT.create(ISummarizerService.class);

	    ServiceDefTarget target = (ServiceDefTarget) this.summarizerService;

	    String moduleRelativeURL = GWT.getModuleBaseURL() + "summarizerservice";
	    target.setServiceEntryPoint(moduleRelativeURL);
	    //outputText.setText(moduleRelativeURL);

	    
	    this.serviceCallback = new AsyncCallback() 
	    {
	        public void onSuccess(Object result) 
	        {
	            List summarySentences = (List) result;
                StringBuffer outputTextValue = new StringBuffer();
                for (int idx=0; idx < summarySentences.size(); idx++)
                {
                    Sentence sentence = (Sentence) summarySentences.get(idx);
                    
                    if (sentence.getSentenceNumber() == 0)
                    {
                        String sentenceTextValue = sentence.getSentenceText();
                        if (sentenceTextValue != null && sentenceTextValue.length() != 0)
                        {
                            outputTextValue.append(sentence.getSentenceText());
                            outputTextValue.append("\n\n");
                        }
                    }
                    else
                    {
                        outputTextValue.append("[" + sentence.getSentenceNumber() + "]: " + sentence.getSentenceText());
                        outputTextValue.append("\n\n");
                    }
                }
                outputText.setText(outputTextValue.toString());
                
                statusMessage.setText("");
                
                buttonSummarize.setEnabled(true);
	        }

	        public void onFailure(Throwable caught) 
	        {
	            statusMessage.setHTML("Server Response:\n\n" + caught.getMessage());
	            buttonSummarize.setEnabled(true);
	        }
	      };


	    // Resize window
		DeferredCommand.addCommand(
		        new Command() 
		        {
		            public void execute() 
		            {
		                onWindowResized(Window.getClientWidth(), Window.getClientHeight());
		            }
		        });

		onWindowResized(Window.getClientWidth(), Window.getClientHeight());
		  
		  
		inputText.addChangeListener(new ChangeListener() 
		{
		    public void onChange(Widget sender) 
		    {
		        //outputText.setText("");
		    }
		});
		  
		inputText.addKeyboardListener(new KeyboardListenerAdapter() 
		{
		    public void onKeyPress(Widget sender, char keyCode, int modifiers) 
		    {
		        String outputTextValue = outputText.getText();
	    	  
		        if (outputTextValue != null && outputTextValue.length() > 0)
		            outputText.setText("");
		    }
	    });

		  
		buttonSummarize.addClickListener(new ClickListener() 
		{
			public void onClick(Widget sender) 
			{
			    buttonSummarize.setEnabled(false);
			    
			    outputText.setText("");
			      
			    statusMessage.setHTML("<b><i>Please wait...summarizing the source text.</i></b>");
				
				summarizerService.summarizeTFDS(inputText.getText(),
				                                Integer.valueOf(summarySizeListBox.getValue(summarySizeListBox.getSelectedIndex())),
				                                serviceCallback);
			}
		});
	}
	  
    public void onWindowResized(int width, int height) 
    {
        //inputText.setText(width + ", " + height + "\n" + inputText.getOffsetWidth() + ", " + inputText.getOffsetHeight());
    }
}
