package bioannotator.duist;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import bioannotator.AnnotationTimer;
import bioannotator.IConceptAnnotator;
import bioannotator.mmtx.MMTxAnnotator;
import bioannotator.tables.ConceptIdToConceptNameTable;
import bioannotator.tables.ConceptIdToPhraseIdsTable;
import bioannotator.tables.ConceptLMUnigramTable;
import bioannotator.tables.PhraseIdToConceptIdsTable;
import bioannotator.tables.PhraseIdToWordIdsTable;
import bioannotator.tables.VariantsTable;
import bioannotator.tables.WordIdToPhraseIdsTable;
import bioannotator.tables.WordIdToWordIPFTable;
import bioannotator.tables.WordToWordIdTable;
import biocommon.document.DocumentConcept;
import biocommon.document.DocumentSection;
import biocommon.document.DocumentSentence;
import biocommon.document.DocumentSentencePhrase;

public class DUISTAnnotator implements IConceptAnnotator
{
    @SuppressWarnings("unused")
    private static final String          COPYRIGHT       = biocommon.copyright.Copyright.COPYRIGHT;

    private static boolean               m_initialized   = false;

    private List<ICandidatePhraseFilter> filters         = new ArrayList<ICandidatePhraseFilter>();
    private IConceptMapper               conceptMapper   = null;
    private AnnotationTimer              timer           = new AnnotationTimer();

    
    /**
     * 
     */
    public AnnotationTimer getAnnotationTimer()
    {
        return this.timer;
    }
    
    /**
     * 
     */
    public String getName()
    {
        return "DUIST";
    }
    
    public String getStats()
    {
        final String EOL = "\r\n";

        StringBuilder sb = new StringBuilder();
        
        try
        {
            if (!m_initialized)
                delayedInitialize();
            
            sb.append("Number of concepts: " + ConceptIdToConceptNameTable.size() + EOL);

            sb.append("Number of phrases: " + PhraseIdToConceptIdsTable.size() + EOL);

            sb.append("Number of words: " + WordToWordIdTable.size() + EOL);
            
            sb.append("Number of inflected words: " + WordToWordIdTable.size() + EOL);
            
            sb.append("Number of word variants: " + WordToWordIdTable.size() + EOL);

        }
        catch(Exception e)
        {
            sb.append(e.getMessage());
        }
        
        return sb.toString();
    }
    

    /**
     * 
     * 
     */
    public void initialize() throws Exception
    {
        // Configure candidate phrase filters
//        ICandidatePhraseFilter phraseSizeFilter = new CandidatePhraseFilterPhraseSize();
//        phraseSizeFilter.initialize();
//        filters.add(phraseSizeFilter);

        
//        ICandidatePhraseFilter filterSkipBigram = new CandidatePhraseFilterSkipBigram();
//        filterSkipBigram.initialize();
//        filters.add(filterSkipBigram);
        
//        ICandidatePhraseFilter filterCoverageIPF = new CandidatePhraseFilterCoverageIPF();
//        filterCoverageIPF.initialize();
//        filters.add(filterCoverageIPF);

//        ICandidatePhraseFilter filterCoverageBINARY = new CandidatePhraseFilterCoverageBinary();
//        filterCoverageBINARY.initialize();
//        filters.add(filterCoverageBINARY);

        ICandidatePhraseFilter filterCoverageIPFInvolvement = new CandidatePhraseFilterIPFInvolvement();
        filterCoverageIPFInvolvement.initialize();
        filters.add(filterCoverageIPFInvolvement);


        // Configure final mapper
//        this.conceptMapper = new ConceptMapperUnigramLM();
        this.conceptMapper = new ConceptMapperPhraseCount();
        this.conceptMapper.initialize();
    }

    
    /**
     * 
     * @throws Exception
     */
    private void delayedInitialize() throws Exception
    {
        if (!m_initialized)
        {
            try
            {
                this.timer.initializationStartClock();

                System.out.println("Loading variants...");
                VariantsTable.load();

                System.out.println("Loading words...");
                WordToWordIdTable.load();

                System.out.println("Loading concepts...");
                ConceptIdToConceptNameTable.load();

                System.out.println("Loading pid2cids...");
                PhraseIdToConceptIdsTable.load();

                System.out.println("Loading cid2pids...");
                ConceptIdToPhraseIdsTable.load();

                System.out.println("Loading pid2wids...");
                PhraseIdToWordIdsTable.load();

                System.out.println("Loading wid2pids..");
                WordIdToPhraseIdsTable.load();

//                System.out.println("Loading LM...");
//                ConceptLMUnigramTable.load();

                System.out.println("Loading wid2IPF...");
                WordIdToWordIPFTable.load();

                m_initialized = true;
            }
            finally
            {
                this.timer.initializationEndClock();
            }
        }
    }

    /**
     * 
     */
    public void terminate() throws Exception
    {
    }

    
    /**
     * 
     */
    public void annotateFile(String filename, biocommon.document.Document annotatedDocument) throws Exception
    {
        // Validate parameters
        if (annotatedDocument == null)
            throw new Exception("A valid Document instance was not specified.");

        if (filename == null || filename.length() == 0)
            throw new Exception("Filename not specified");

        // Initialize
        annotatedDocument.clear();

        // Verify file is specified, exists and is not empty
        File fileToAnnotate = new File(filename);
        if (fileToAnnotate == null)
            throw new Exception("The input file could not be accessed");
        if (!fileToAnnotate.exists())
            throw new Exception("The input file does not exist");
        if (fileToAnnotate.length() == 0)
            throw new Exception("The input file is empty");


        // Get document contents same as MMTx
        //biocommon.document.Document mmtxDocument = new biocommon.document.Document("MMTX");
        IConceptAnnotator mmtxAnnotator = new MMTxAnnotator();
        mmtxAnnotator.annotateFile(filename, annotatedDocument);
        
        // Remove MMTx phrase annotations
        for (DocumentSection docSection : annotatedDocument.getSections())
        {
            for (DocumentSentence docSentence : docSection.getSentences())
            {
                for (DocumentSentencePhrase docPhrase : docSentence.getPhrases())
                {
                    docPhrase.getConcepts().clear();
                }
            }
        }

        // Display phrase annotations
//        System.out.println("Verify clear:");
//        for (DocumentSection docSection : annotatedDocument.getSections())
//        {
//            System.out.println("Section#" + docSection.getSectionNumber());
//            for (DocumentSentence docSentence : docSection.getSentences())
//            {
//                System.out.println("\tSentence #" + docSentence.getSentenceNumber());
//                for (DocumentSentencePhrase docPhrase : docSentence.getPhrases())
//                {
//                    System.out.println("\t\tPhrase#" + docPhrase.getPhraseText());
//                    System.out.println("\t\t\t# Concepts: " + docPhrase.getConcepts().size());
//                }
//            }
//        }
        
        // Annotate phrases
        for (DocumentSection docSection : annotatedDocument.getSections())
        {
            for (DocumentSentence docSentence : docSection.getSentences())
            {
                for (DocumentSentencePhrase docPhrase : docSentence.getPhrases())
                {
                    this.annotatePhrase(docPhrase);
                }
            }
        }
        
        
        // Display annotated phrases
//        System.out.println();
//        System.out.println("Annotated Phrase:");
//        for (DocumentSection docSection : annotatedDocument.getSections())
//        {
//            System.out.println("Section#" + docSection.getSectionNumber());
//            for (DocumentSentence docSentence : docSection.getSentences())
//            {
//                System.out.println("\tSentence #" + docSentence.getSentenceNumber());
//                for (DocumentSentencePhrase docPhrase : docSentence.getPhrases())
//                {
//                    System.out.println("\t\tPhrase#" + docPhrase.getPhraseText());
//                    System.out.println("\t\t\t# Concepts: " + docPhrase.getConcepts().size());
//                    for (DocumentConcept concept : docPhrase.getConcepts().values())
//                        System.out.println("\t\t\t\t" + concept.getId() + ": " + concept.getName());
//                }
//            }
//        }
    }

    
    /**
     * 
     */
    @SuppressWarnings("unchecked")
    public void annotatePhrase(DocumentSentencePhrase phrase) throws Exception
    {
        // Validate parameters
        if (phrase == null || phrase.getPhraseText() == null || phrase.getPhraseText().length() == 0)
            throw new Exception("A valid DocumentSentencePhrase instance was not specified.");
        
        //
        // Initialize
        //
        phrase.getConcepts().clear();

        if (!m_initialized)
            delayedInitialize();

        String phraseContent = phrase.getPhraseText().replaceAll(";", " ").replaceAll(":", " ").replaceAll("-", " ");

        //
        // Annotate phrase
        //
        try
        {
            this.timer.phraseStartClock();

            List<SourcePhraseWord> sourcePhraseWords = CandidatePhraseListGenerator.getSourcePhraseWords(phraseContent);
            if (sourcePhraseWords.size() == 0)
                System.out.println("zero words found in phrase '" + phraseContent + "'");
            
            List<CandidatePhrase> candidatePhraseList = CandidatePhraseListGenerator
                    .generateSourcePhraseCandidates(sourcePhraseWords);

            //System.out.println("\t#candidate phrases generated: " + candidatePhraseList.size());
            // for (CandidatePhrase candidatePhraseItem : candidatePhraseList)
            // System.out.println("\t" + candidatePhraseItem.getPhraseId());

            for (ICandidatePhraseFilter filter : filters)
            {
                //System.out.println("\tApplying filter " + filter.getName() + " to " + candidatePhraseList.size() + " phrases");
                if (candidatePhraseList.size() > 0)
                {
                    //int numBefore = candidatePhraseList.size();
                    candidatePhraseList = filter.filter(sourcePhraseWords, candidatePhraseList);
                    //int numAfter = candidatePhraseList.size();
                    
//                    if ((numBefore - numAfter) > 0)
//                        System.out.println("\t\tCandidate phrase reduction using filter: " + filter.getName() + ", before: " + numBefore + ", numAfter: " + numAfter + ", reduction: " + (numBefore-numAfter));
                        
                }
                //System.out.println("\t\t#candidate phrases after filtering : " + candidatePhraseList.size());
            }

            //System.out.println("Applying mapper " + this.conceptMapper.getName());
            //List<Integer> conceptIds = new ArrayList<Integer>(); 
            List<Integer> conceptIds = this.conceptMapper.map(sourcePhraseWords, candidatePhraseList);

            //
            // Store mapped concepts
            //

//            // Create new section instance and add it to document list of
//            // sections
//            DocumentSection docSection = new DocumentSection(0, "phrase");
//            annotatedDocument.getSections().add(docSection);
//
//            // Create new sentence instance and add it to section list of
//            // sentences
//            DocumentSentence docSentence = new DocumentSentence(phrase, 0, 0);
//            docSection.getSentences().add(docSentence);
//
//            // Create new phrase instance and add it to sentence list of phrases
//            DocumentSentencePhrase docPhrase = new DocumentSentencePhrase(phrase, 0, 0);
//            docSentence.getPhrases().add(docPhrase);

            // System.out.println("\tMapped Concepts:");
            for (Integer conceptId : conceptIds)
            {
                // System.out.println("\t Concept Id:" + conceptId + ": " +
                // ConceptIdToConceptNameTable.getConceptName(conceptId));

                // Add new concept
                DocumentConcept phraseConcept = new DocumentConcept("C" + String.format("%07d", conceptId), ConceptIdToConceptNameTable
                        .getConceptName(conceptId), "0");
                if (!phrase.getConcepts().containsKey(conceptId.toString()))
                    phrase.getConcepts().put(conceptId.toString(), phraseConcept);
            }
        }
        finally
        {
            this.timer.phraseEndClock();
        }
    }
    
    public void annotatePhraseFile(String phraseFilename, PrintStream ps) throws Exception
    {
        // Validate parameters
        if (phraseFilename == null || phraseFilename.length() == 0)
            throw new Exception("Filename not specified");

        // Verify file is specified, exists and is not empty
        File fileToAnnotate = new File(phraseFilename);
        if (fileToAnnotate == null)
            throw new Exception("The input file could not be accessed");
        if (!fileToAnnotate.exists())
            throw new Exception("The input file does not exist");
        if (fileToAnnotate.length() == 0)
            throw new Exception("The input file is empty");

        // Process file
        BufferedReader fileReader = null;
        
        try
        {
            fileReader = new BufferedReader(new FileReader(phraseFilename));
            
            String line = null;
            while ((line = fileReader.readLine()) != null)
            {
                String phrase = line.trim().toLowerCase();
                
                //System.out.println("phrase: " + phrase);
                
                Integer numMappings = Integer.parseInt(fileReader.readLine().trim());
                for (int idx=0; idx < numMappings; idx++)
                    fileReader.readLine();
                
                biocommon.document.DocumentSentencePhrase annotatedPhrase = new biocommon.document.DocumentSentencePhrase(phrase, 0, 0);
                
                this.annotatePhrase(annotatedPhrase);
                
//                for (DocumentSection docSection : annotatedDocument.getSections())
//                {
//                    for (DocumentSentence docSentence : docSection.getSentences())
//                    {
//                        for (DocumentSentencePhrase docPhrase : docSentence.getPhrases())
                        {
                            if (ps != null)
                            {
                                // The phrase source text
                                ps.println(annotatedPhrase.getPhraseText());
                            
                                // The number of concepts mapped
                                ps.println("  " + annotatedPhrase.getConcepts().values().size());
                            
                                // The mapped concepts
                                for (DocumentConcept docPhraseConcept : annotatedPhrase.getConcepts().values())
                                {
                                    ps.println("  " + docPhraseConcept.getId() + "|" + docPhraseConcept.getName() + "|" + docPhraseConcept.getSemanticTypeId());
                                }
                            }
                        }
//                    }
//                }
            }            
            
            fileReader.close();
        }
        finally
        {
            try
            {
                if (fileReader != null)
                    fileReader.close();
            }
            catch (Exception e)
            {
            }
        }
    }

    
    /**
     * 
     */
    @SuppressWarnings("unchecked")
    public void annotateText(String text, biocommon.document.Document annotatedDocument) throws Exception
    {
        // Validate parameters
        if (annotatedDocument == null)
            throw new Exception("A valid Document instance was not specified.");

        // Initialize
        annotatedDocument.clear();

        throw new Exception("Not implemented");
    }
}
