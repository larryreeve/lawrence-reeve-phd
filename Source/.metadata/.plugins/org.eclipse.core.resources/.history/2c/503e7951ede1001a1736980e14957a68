package edu.drexelist.biochain;

import java.io.*;
import java.util.*;

import edu.drexelist.biochain.annotate.*;
import edu.drexelist.biochain.chain.*;
import edu.drexelist.biochain.document.*;
import edu.drexelist.biochain.evaluate.*;
import edu.drexelist.biochain.output.*;
import edu.drexelist.biochain.score.*;
import edu.drexelist.biochain.util.*;

import org.apache.commons.cli.*;

public class BioChainMain
{
	private final static String PROG_NAME = "BioSumm";
	private final static String PROG_VERSION = "1.1";
	
	private static ArrayList<String> m_filenameList = new ArrayList<String>();
	
	public static void main (String[] arguments) 
		throws Exception, IOException 
    {
		String params[] = null;
		
		// Setup command line parser and parse command line
    	Options cliOptions = new Options();
    	
//    	cliOptions.addOption("a", true,  "annotator to use; valid options are mmtx; default is mmtx");
//    	cliOptions.addOption("d", true,  "define output options, in format name=value;name=value");
//    	cliOptions.addOption("f", true,  "apply semantic filtering");
//    	cliOptions.addOption("h", false, "print this message");
//    	cliOptions.addOption("i", true,  "filename of source text");
//    	cliOptions.addOption("b", true,  "filename of source text");
//    	cliOptions.addOption("o", true,  "output file");
//    	cliOptions.addOption("s", true,  "scoring options");
//    	cliOptions.addOption("t", true,  "output type; valid options are allchains, evaluation, phrases, sentences, strongchains, summary; default is summary");

    	cliOptions.addOption(OptionBuilder.withArgName("annotatorname").hasArg().withDescription("annotator to use; valid options are mmtx; default is mmtx").create("annotator"));
    	//cliOptions.addOption(OptionBuilder.withArgName("property=value").hasArg().withValueSeparator().withDescription("define output options, in format name=value;name=value").create("outputoptions"));
    	cliOptions.addOption(OptionBuilder.withArgName("property=value").hasArg().withDescription("define output options, in format name=value;name=value").create("outputoptions"));
    	cliOptions.addOption(OptionBuilder.withArgName("filtername").hasArg().withDescription("use semantic filtering; valid options are DUCOM; default is none").create("filter"));
    	cliOptions.addOption(OptionBuilder.withDescription("print this message").create("help"));
    	cliOptions.addOption(OptionBuilder.withArgName("file").hasArg().withDescription("filename of source abstract").create("inputfileabstract"));
    	cliOptions.addOption(OptionBuilder.withArgName("file").hasArg().withDescription("filename of source text").create("inputfilefull"));
    	cliOptions.addOption(OptionBuilder.withArgName("file").hasArg().withDescription("filename of output file").create("outputfile"));
    	cliOptions.addOption(OptionBuilder.withArgName("property=value").hasArg().withDescription("define scoring options, in format name=value;name=value").create("scoringoptions"));
    	cliOptions.addOption(OptionBuilder.withArgName("scorer").hasArg().withDescription("score function to use; valid options are chainfreqpos, freqdist, lead, random, summbasic-term, summbasic-concept; default is chainfreqpos").create("scorer"));
    	cliOptions.addOption(OptionBuilder.withArgName("typename").hasArg().withDescription("output type; valid options are allchains, conceptcount, evaluation, phrases, sentences, statistics, strongchains, summary; default is summary").create("outputtype"));
    	cliOptions.addOption(OptionBuilder.withDescription("generates verbose output").create("verbose"));
//    	for (String s : arguments)
//    		System.out.println(s);

    	CommandLineParser cliParser = new BasicParser();
    	CommandLine cliLine = null;
        try 
        {
            // parse the command line arguments
        	cliLine = cliParser.parse(cliOptions, arguments);
        }
        catch(ParseException e) 
        {
            System.err.println("Command line parsing failed: " + e.getMessage());
   	    	HelpFormatter formatter = new HelpFormatter();
   	    	formatter.printHelp(PROG_NAME, cliOptions);   
        }


   	    // Display help
   	    if (cliLine.hasOption("help"))
   	    {
   	    	HelpFormatter formatter = new HelpFormatter();
   	    	formatter.printHelp(PROG_NAME, cliOptions);   
   	    	return;
   	    }
   	    
   	    // Retrieve argument options
   	    String 	paramSourceFilenameFull		= null;
   	    String 	paramSourceFilenameAbstract	= null;
   	    String 	paramOutputFilename 		= null;
   	    String 	paramAnnotatorName  		= "mmtx";
   	    String 	paramOutputOptions			= "compressionrate=15";
   	    String 	paramScorer					= "chainfreqpos";
   	    String 	paramScoringOptions			= "stddev=2";
   	    String 	paramSemanticFilteringType	= null;
   	    String 	paramOutputType     		= "summary";
   	    boolean paramVerbose				= false;
   	    
   	    // Required
   	    //
   	    if (cliLine.hasOption("inputfilefull"))
   	    {
   	    	paramSourceFilenameFull = cliLine.getOptionValue("inputfilefull");
   	    }
   	    else
   	    {
   	    	HelpFormatter formatter = new HelpFormatter();
   	    	formatter.printHelp(PROG_NAME, cliOptions);   
   	    	
   	    	throw new Exception("Source filename not specified");
   	    }

   	    // Optional parameters
   	    //
   	    if (cliLine.hasOption("annotator"))
   	    	paramAnnotatorName = cliLine.getOptionValue("annotator").toLowerCase();

   	    if (cliLine.hasOption("inputfileabstract"))
   	    	paramSourceFilenameAbstract = cliLine.getOptionValue("inputfileabstract");

   	    if (cliLine.hasOption("outputoptions"))
   	    	paramOutputOptions = cliLine.getOptionValue("outputoptions");

   	    if (cliLine.hasOption("filter"))
   	    	paramSemanticFilteringType = cliLine.getOptionValue("filter");

   	    if (cliLine.hasOption("outputfile"))
   	    	paramOutputFilename = cliLine.getOptionValue("outputfile");

   	    if (cliLine.hasOption("scorer"))
   	    	paramScorer = cliLine.getOptionValue("scorer");

   	    if (cliLine.hasOption("scoringoptions"))
   	    	paramScoringOptions = cliLine.getOptionValue("scoringoptions");

   	    if (cliLine.hasOption("outputtype"))
   	    	paramOutputType = cliLine.getOptionValue("outputtype").toLowerCase();
   	    
   	    if (cliLine.hasOption("verbose"))
   	    	paramVerbose = true;
   	    
   	    // Summarize parameters
   	    if (paramVerbose)
   	    {		
   	    	System.out.println();
   	    	System.out.println();
   	    	System.out.println(PROG_NAME + " " + PROG_VERSION);
   	    	System.out.println();

   	    	System.out.println("\tParameters:");
   	    	System.out.println("\t\tSource file: " 			+ paramSourceFilenameFull);
   	    	if (paramSourceFilenameAbstract != null)
   	    		System.out.println("\t\tSource file abstract: "	+ paramSourceFilenameAbstract);
   	    	System.out.print("\t\tOutput file: ");
   	    	if (paramOutputFilename == null)
   	    		System.out.println("stdout");
   	    	else
   	    		System.out.println(paramOutputFilename);
   	    	System.out.println("\t\tConcept annotator: " 	+ paramAnnotatorName);
   	    	System.out.println("\t\tOutput format: " 	 	+ paramOutputType);
   	    	System.out.println("\t\tOutput options: " 		+ paramOutputOptions);
   	    	System.out.println("\t\tScorer: " 				+ paramScorer);
   	    	if (paramSemanticFilteringType != null && paramSemanticFilteringType.length() != 0)
   	    		System.out.println("\t\tSemantic Filtering method: " 	+ paramSemanticFilteringType);
   	    	else
   	    		System.out.println("\t\tSemantic Filtering method: none");
   	    	System.out.println("\t\tScoring options: " 		+ paramScoringOptions);
   	    	System.out.println("\t\tVerbose: " + paramVerbose);
   	    	//	System.out.println("\tScoring method: " 	+ paramOutputOptions);
   	    	System.out.println();
   	    }
   	    

    	IConceptAnnotator annotator = null;
        try 
        {
            // Get list of files to process
        	buildFileList(paramSourceFilenameFull);
        	

        	// ----------
        	// Initialize
        	// ----------
        	
        	// Initialize annotator
        	StopWatch annotatorInitTime = new StopWatch();
        	annotatorInitTime.start();
			if (paramVerbose)
			{
				System.out.println();
        		System.out.println("Initializing annotator '" + paramAnnotatorName + "'...");
			}
        	if (paramAnnotatorName.equalsIgnoreCase("mmtx"))
        		annotator = new MMTxConceptAnnotator();
        	else
        	{
       	    	HelpFormatter formatter = new HelpFormatter();
       	    	formatter.printHelp(PROG_NAME, cliOptions);   
        		
        		throw new Exception("Unknown annotator type '" + paramAnnotatorName + "'");
        	}
        	annotator.initialize();
        	annotatorInitTime.stop();
			if (paramVerbose)
			{
				System.out.println("Annotator initialization completed..." + annotatorInitTime.getElapsedTime() + " ms");
				System.out.println();
			}
        	
        	// Initialize output generator
        	IOutputGenerator outputGenerator = null;
        	if (!paramOutputType.equals("evaluation"))
        	{
	    		if (paramOutputType.equalsIgnoreCase("conceptcount"))
	    			outputGenerator = new OutputConceptCount();
	    		else if (paramOutputType.equalsIgnoreCase("phrases"))
	    			outputGenerator = new OutputPhrases();
	    		else if (paramOutputType.equalsIgnoreCase("sentences"))
	    			outputGenerator = new OutputSentences();
	    		else if (paramOutputType.equalsIgnoreCase("statistics"))
	    			outputGenerator = new OutputStatistics();
	    		else if (paramOutputType.equalsIgnoreCase("summary"))
	    			outputGenerator = new OutputSummary();
	    		else if (paramOutputType.equalsIgnoreCase("strongchains"))
	    			outputGenerator = new OutputStrongChains();
	    		else
	    		{
	       	    	HelpFormatter formatter = new HelpFormatter();
	       	    	formatter.printHelp(PROG_NAME, cliOptions);   
	    			
	    			throw new Exception("Unknown output type '" + paramOutputType + "'");
	    		}
        	}
        	
    		// Output options
    		Properties outputOptions = new Properties();
    		params = paramOutputOptions.split(";");
    		for (String param : params)
    		{
    			String nameValuePair[] = param.split("=");
    			outputOptions.put(nameValuePair[0].toLowerCase(), nameValuePair[1]);
    		}
        	
    		// Scoring options
    		Properties scoringOptions = new Properties();
    		params = paramScoringOptions.split(";");
    		for (String param : params)
    		{
    			String nameValuePair[] = param.split("=");
    			scoringOptions.put(nameValuePair[0].toLowerCase(), nameValuePair[1]);
    		}

    		
    		// Initialize scorers
    		IScorer chainListScorer = null;
    		if (paramScorer == null || paramScorer.toLowerCase().equalsIgnoreCase("chainfreqpos"))
    			chainListScorer = new ScoreChainConceptFreqSentencePosition();
    		else if (paramScorer.toLowerCase().equalsIgnoreCase("freqdist"))
    			chainListScorer = new ScoreFreqDist();
    		else if (paramScorer.toLowerCase().equalsIgnoreCase("lead"))
    			chainListScorer = new ScoreBaseLead();
    		else if (paramScorer.toLowerCase().equalsIgnoreCase("random"))
    			chainListScorer = new ScoreBaseRandom();
    		else if (paramScorer.toLowerCase().equalsIgnoreCase("summbasic-concept"))
    			chainListScorer = new ScoreFreqSummBasicConcept();
    		else if (paramScorer.toLowerCase().equalsIgnoreCase("summbasic-term"))
    			chainListScorer = new ScoreFreqSummBasic();
        	else
        	{
       	    	HelpFormatter formatter = new HelpFormatter();
       	    	formatter.printHelp(PROG_NAME, cliOptions);   
        		
        		throw new Exception("Unknown scorer '" + paramScorer + "'");
        	}
    		
    		
    		IScorer chainListFilter = null;
    		if (paramSemanticFilteringType != null && paramSemanticFilteringType.length() != 0)
    		{
    			if (paramSemanticFilteringType.equalsIgnoreCase("DUCOM"))
    				chainListFilter = new ScoreChainFilterDUCOM();
    		}
        	
        	// --------------------------
        	// Process source document(s)
        	// --------------------------
    		if (!paramOutputType.equals("evaluation"))
    		{
    			for (String filename : m_filenameList)
    			{
    				Document annotatedDocument = new Document(filename);

    				// Annotate document
    				StopWatch annotatorAnnotateTime = new StopWatch();
    				annotatorAnnotateTime.start();
    				if (paramVerbose)
    					System.out.println("\tAnnotating document '" + filename + "'...");
    				annotator.annotate(filename, annotatedDocument);
    				annotatorAnnotateTime.stop();
    				if (paramVerbose)
    					System.out.println("\tAnnotation completed..." + annotatorAnnotateTime.getElapsedTime() + " ms");
        		
    				// Chain the document concepts
    				List<ConceptChain> conceptChainList = new ArrayList<ConceptChain>();
    				ConceptChainer.chainDocument(conceptChainList, annotatedDocument);
        		
    				// Filter the chains
    				if (chainListFilter != null)
    				{
    					StopWatch filterTime = new StopWatch();
    					filterTime.start();
    					chainListFilter.score(conceptChainList, annotatedDocument, scoringOptions);
    					filterTime.stop();
    					if (paramVerbose)
    						System.out.println("\tSemantic filtering completed..." + filterTime.getElapsedTime() + " ms");
    				}

    				// Score the chains
	        		StopWatch scorerTime = new StopWatch();
	        		scorerTime.start();
	        		chainListScorer.score(conceptChainList, annotatedDocument, scoringOptions);
	        		scorerTime.stop();
	        		if (paramVerbose)
	        			System.out.println("\tDocument scoring completed..." + scorerTime.getElapsedTime() + " ms");
	        		
	        		
	        		// Generate output
	        		PrintWriter writer = null;
	        		//String outputFilename = null;
	        		if (paramOutputFilename == null || paramOutputFilename.length() == 0)
	        		{
	        			writer = new PrintWriter(System.out);
	//        			outputFilename = filename;
	//        			if (outputFilename.toLowerCase().endsWith(".txt"))
	//        				outputFilename = outputFilename.substring(outputFilename.length() - 4, 3);
	//        			
	//        			outputFilename = outputFilename + paramOutputType + ".txt";
	        		}
	        		else
	        		{
	        			writer = new PrintWriter(new BufferedWriter(new FileWriter(paramOutputFilename, false)));
	        			//outputFilename = paramOutputFilename;
	        		}
	        		
	        		StopWatch outputTime = new StopWatch();
	        		outputTime.start();
	        		outputGenerator.generate(writer, annotatedDocument, conceptChainList, outputOptions);
	        		writer.flush();
	    			outputTime.stop();
    				if (paramVerbose)
    					System.out.println("\tOutput generation completed..." + outputTime.getElapsedTime() + " ms");
	        	}
    		}
    		else	// Evaluation
    		{
				Document annotatedDocumentFullText = new Document(paramSourceFilenameFull);
				Document annotatedDocumentAbstract = new Document(paramSourceFilenameAbstract);
				
				// Open output file
        		PrintWriter writer = null;
        		if (paramOutputFilename == null || paramOutputFilename.length() == 0)
        		{
        			writer = new PrintWriter(System.out);
        		}
        		else
        		{
        			writer = new PrintWriter(new BufferedWriter(new FileWriter(paramOutputFilename, false)));
        		}
				

				// Annotate documents
				StopWatch annotatorAnnotateTime = new StopWatch();
				annotatorAnnotateTime.start();
				if (paramVerbose)
					writer.println("\tAnnotating full-text document '" + paramSourceFilenameFull + "'...");
				annotator.annotate(paramSourceFilenameFull, annotatedDocumentFullText);
				annotatorAnnotateTime.stop();
				if (paramVerbose)
					writer.println("\tAnnotation completed..." + annotatorAnnotateTime.getElapsedTime() + " ms");
				
				annotatorAnnotateTime.start();
				writer.println("\tAnnotating abstract document '" + paramSourceFilenameAbstract + "'...");
				if (paramVerbose)
					annotator.annotate(paramSourceFilenameAbstract, annotatedDocumentAbstract);
				annotatorAnnotateTime.stop();
				if (paramVerbose)
				{
					writer.println("\tAnnotation completed..." + annotatorAnnotateTime.getElapsedTime() + " ms");
					writer.println();
					writer.println();
				}
    		
				// Chain the document concepts
				List<ConceptChain> conceptChainListFullText = new ArrayList<ConceptChain>();
				List<ConceptChain> conceptChainListAbstract = new ArrayList<ConceptChain>();
				ConceptChainer.chainDocument(conceptChainListFullText, annotatedDocumentFullText);
				ConceptChainer.chainDocument(conceptChainListAbstract, annotatedDocumentAbstract);
    		
				// Filter the chains
				if (chainListFilter != null)
				{
					StopWatch filterTime = new StopWatch();
					filterTime.start();
					chainListFilter.score(conceptChainListFullText, annotatedDocumentFullText, scoringOptions);
					chainListFilter.score(conceptChainListAbstract, annotatedDocumentAbstract, scoringOptions);
					filterTime.stop();
    				if (paramVerbose)
    					writer.println("\tSemantic filtering completed..." + filterTime.getElapsedTime() + " ms");
				}

				// Score the chains
        		StopWatch scorerTime = new StopWatch();
        		scorerTime.start();
        		chainListScorer.score(conceptChainListFullText, annotatedDocumentFullText, scoringOptions);
        		chainListScorer.score(conceptChainListAbstract, annotatedDocumentAbstract, scoringOptions);
        		scorerTime.stop();
				if (paramVerbose)
					writer.println("\tDocument scoring completed..." + scorerTime.getElapsedTime() + " ms");
        		
        		
        		// Generate evaluation
        		IEvaluator evaluator = new EvaluatorPrecisionRecall();
        		StopWatch outputTime = new StopWatch();
        		outputTime.start();
        		evaluator.evaluate(writer, 
        						   annotatedDocumentFullText,
        						   conceptChainListFullText,
        						   annotatedDocumentAbstract,
        						   conceptChainListAbstract,
        						   outputOptions);
        		writer.flush();
    			outputTime.stop();
				if (paramVerbose)
					System.out.println("\tEvaluation generation completed..." + outputTime.getElapsedTime() + " ms");
        	}
        	
        	// -----------
        	// Termination
        	// -----------

        	//
        	// Terminate the annotator
        	//StopWatch annotatorTerminateTime = new StopWatch();
        	//annotatorTerminateTime.start();
        	//System.err.println("Terminating annotator...");
        	annotator.terminate();
        	//annotatorTerminateTime.stop();
        	//System.err.println("Annotator termination completed..." + annotatorTerminateTime.getElapsedTime() + " ms");
        	//System.err.println();
        }
        catch (Exception e) 
        {
            e.printStackTrace();
            System.err.println("Error: " + e.toString());
        }
    }
	
	private static void buildFileList(String filespec)
	{
		m_filenameList.clear();
		
		File startingFile = new File(filespec);
		
		processAllDirsAndFiles(startingFile);
	}
	
	private static void processAllDirsAndFiles(File fileToProcess) 
	{
        if (fileToProcess.isDirectory()) 
        {
    		String filesInDir[] = fileToProcess.list();
    		
    		for (String nextfile : filesInDir)
    			processAllDirsAndFiles(new File(fileToProcess, nextfile));
        }
        else
        {
        	String filename = fileToProcess.getAbsolutePath().toLowerCase();
        	
        	if (filename.endsWith("-a.txt"))
        		m_filenameList.add(filename);
        	else if (filename.endsWith(".spl"))
        		m_filenameList.add(filename);
        }
    }
}

